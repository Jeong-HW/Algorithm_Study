function solution(sizes) {
  /*
  문제 상에서 가로, 세로리고 명시하기 때문에 햇갈리기 쉬울 수 있다.
  하지만 문제설명에서 보았듯이, 2번 명함을 가로로 눕힌 예시를 잘 생각해보면 어떤 모서리든 가로가 될 수 있고 혹은 세로가 될 수 있다.
  두 개의 모서리를 비교하여 큰 값을 전부 가로로 생각하고 작은 값을 전부 세로라고 생각해서 문제를 풀면 각 모서리 길이의 최대값이 정답이 된다.
  */
  let size1 = []; // 작은 모서리 길이를 담을 배열
  let size2 = []; // 큰 모서리 길이를 담을 배열
  for (let card of sizes) {
    // 배열 형태로 카드의 길이가 담겨 있기에 sort를 활용하여 오름차순으로 정렬시켜준다
    // 0번째 인덱스는 작은 값, 1번째 인덱스는 큰 값이므로 각각의 배열에 넣어준다
    card.sort((a, b) => a - b);
    size1.push(card[0]);
    size2.push(card[1]);
  }
  // 해당 모서리들의 집합들 중, 가장 큰 값을 찾아내서 크기를 계산한다
  return Math.max(...size1) * Math.max(...size2);
}
